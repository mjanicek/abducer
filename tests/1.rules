k(now, mutual(r,h)) : @(Id::thing, Obj) <-
	a(com) : it(Id) / in_focus,
	k(now, attrib(r,h)) : @(Id::thing, Obj) / prove.

e(now) : mention(r, Id) <-
	a(com) : it(Id) / in_focus,
	?( k(now, private(r)) : @(Id::thing, Obj)).

r_knows_it(Id, Prop) <-
	a(com) : it(Id) / in_focus,
	k(now, private(r)) : @(Id::_, p(Prop)) / prove.

/*
k(now, private(h)) : @(Idx, X) <-
	k(now, mutual(r, h)) : @(Idx, X) / prove.

k(now, private(r)) : @(Idx, X) <-
	k(now, mutual(r, h)) : @(Idx, X) / prove.

k(now, attrib(r, h)) : @(Idx, X) <-
	k(now, mutual(r, h)) : @(Idx, X) / prove.

k(now, attrib(h, r)) : @(Idx, X) <-
	k(now, mutual(r, h)) : @(Idx, X) / prove.
*/

%[] : ( @(Id::Sort, Prop1 ^ Prop2) <-
%	@(Id::Sort, Prop1) / prove,
%	@(Id::Sort, Prop2) / prove
%).

/*
k(now, attrib(r, h)) : fact(F) <-
	e(now) : utter(r, F) / 1.0,
	i : fact(F) / prove,
	k(now, private(r)) : fact(F) / 1.0.

k(now, mutual(r, h)) : fact(F) <-
	e(now) : utter(h, F) / 1.0,
	i : fact(F) / prove,
	k(now, attrib(r, h)) : fact(F) / 3.0.

i : @(Id::thing, box ^ r(colour, CId::colour ^ Colour) ^ r(shape, Shape)) <-
	a(com) : that(Id) / in_focus,
	? k(now,attrib(r,h)) : @(Id::thing, object),
	? k(now,attrib(r,h)) : @(Id::thing, r(colour, CId::colour ^ brown)).

e(now):did(U, X) <-
	a(com):something(U) / prove,
	? e(now):clarif(U).

e(now):do(E) <-
	a(com):it(Subj) / in_focus,
	e(now):utter(E, Utt) / prove,
	i:subject(Utt, Subj) / prove,
	i:ascription(Utt, Quality) / prove.
%------------------------------------------------------------------------------%

	% Rules.

[]:(i:quality(U, colour(Col)) <-
	i:colour(Col) / 0.5,
	i:ascription(U) / 2.0
).

[]:(i:quality(U, colour(Col)) <-
	i:colour(Col) / 0.5,
	i:ascription(U) / func
).

say(what_question(Ref, Q)) <-
	e(now):said(U) / 1.5,
	[]:clarify(U, Q) / 0.5,
	i:subject(U, Ref) / 1.1.

downdate(U) <-
	e(now):said(U) / 1.5,
	not_ground(U) / 1.1.

clarify(U, C) <-
	downdate(U) / 0.8.

?(question(X) -> answer(Y)) <-
	quality(X, Quality) / 1.0,
	subject(Y, Quality) / 1.0.

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

%e/now : utter(r, 'that is a brown object', E, )
%e/now : do(E)

%k(now, r->h) : @(v1.thing, box ^ <Color>(vb1.color ^ red))
%k(now, r & h) : @(v2.thing, object ^ <Color>(vb1.color ^ red))

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

%e0/now : do(E) :-
%	a0/fcom : that(v1) / by_focus,
%	e0/now : utter(r, 'that is a thing') / f2.

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

%e0_now : do(E) :-
%	a0fc : ...
%	k_now_r_and_h : ...

*/
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
