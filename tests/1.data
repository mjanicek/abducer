
	% Assumables.

/*
func = [
	i : ascription(u) = 0.6
%	i0 : ascription(v) = 0.7,
%	i0 : ascription(z) = 1.4
].

in_focus = [
	a(com) : it(v1) = 0.5,
	a(com) : it(v2) = 0.8
].
*/
% ascription(Subject, Quality)

%------------------------------------------------------------------------------%

	% Facts.

%k(now, mutual(h, r)):k_mutual(u).
%k(now, private(r)):k_private(u).
%k(now, attrib(r, h)):k_attrib(u).

k(now, attrib(r, h)) : fact(F) <-
	e(now) : utter(r, F) / 1.0,
	i : fact(F) / prove,
	k(now, private(r)) : fact(F) / 1.0.

k(now, mutual(r, h)) : fact(F) <-
	e(now) : utter(h, F) / 1.0,
	i : fact(F) / prove,
	k(now, attrib(r, h)) : fact(F) / 3.0.

i : Answer << thing.
i : @(v1::thing, box ^ r(colour, blue) ^ r(shape, boxy)).

i : @(Id::thing, box ^ r(colour, CId::colour ^ Colour) ^ r(shape, Shape)) <-
	a(com) : that(Id) / in_focus,
	? k(now,attrib(r,h)) : @(Id::thing, object),
	? k(now,attrib(r,h)) : @(Id::thing, r(colour, CId::colour ^ brown)).


e(now):did(U, X) <-
	a(com):something(U) / prove,
	? e(now):clarif(U).

e(now):do(E) <-
	a(com):it(Subj) / in_focus,
	e(now):utter(E, Utt) / prove,
	i:subject(Utt, Subj) / prove,
	i:ascription(Utt, Quality) / prove.

e(now):utter(e, u).
e(now):utter(f, v).

i:subject(u, v1).
i:ascription(u, colour(red)).

i:subject(v, v2).
i:ascription(v, colour(blue)).

%e0:did(U, X) <- e0:did(U, X) / prove.

e(now):said(u).
i:ascription(u).
i:subject(u, box).
i:cop_restr(u, box).
%i:quality(u, colour(X)).
not_ground(u).

[]:colour(red).
[]:colour(blue).

quality(u, colour).
subject(u, colour).

?(jojo(Y) -> answer(X)) <- kuku(X) / 0.2.

kuku(x).

%------------------------------------------------------------------------------%

	% Rules.

[]:(i:quality(U, colour(Col)) <-
	i:colour(Col) / 0.5,
	i:ascription(U) / 2.0
).

[]:(i:quality(U, colour(Col)) <-
	i:colour(Col) / 0.5,
	i:ascription(U) / func
).

say(what_question(Ref, Q)) <-
	e(now):said(U) / 1.5,
	[]:clarify(U, Q) / 0.5,
	i:subject(U, Ref) / 1.1.

downdate(U) <-
	e(now):said(U) / 1.5,
	not_ground(U) / 1.1.

clarify(U, C) <-
	downdate(U) / 0.8.

?(question(X) -> answer(Y)) <-
	quality(X, Quality) / 1.0,
	subject(Y, Quality) / 1.0.


% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

%e/now : utter(r, 'that is a brown object', E, )
%e/now : do(E)

%k(now, r->h) : @(v1.thing, box ^ <Color>(vb1.color ^ red))
%k(now, r & h) : @(v2.thing, object ^ <Color>(vb1.color ^ red))

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

%e0/now : do(E) :-
%	a0/fcom : that(v1) / by_focus,
%	e0/now : utter(r, 'that is a thing') / f2.

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#

%e0_now : do(E) :-
%	a0fc : ...
%	k_now_r_and_h : ...

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -#
