% Generated by protoc.  DO NOT EDIT.
:- module protocol.

:- interface.

:- import_module protobuf_runtime, bitmap, bool, list, maybe.

:- type term
    --->    term(
                term_type :: term_term_type,
                term_functor :: maybe(string),
                term_args :: list(term),
                term_var_name :: maybe(string)
            ).

:- instance protobuf_runtime.pb_message(term).

:- func term_functor_or_default(term) = string.

:- func term_var_name_or_default(term) = string.

:- type atom
    --->    atom(
                atom_pred_sym :: string,
                atom_args :: list(term)
            ).

:- instance protobuf_runtime.pb_message(atom).

:- type modalised_atom
    --->    modalised_atom(
                modalised_atom_mod :: list(modality),
                modalised_atom_atom :: atom
            ).

:- instance protobuf_runtime.pb_message(modalised_atom).

:- type assumability_function
    --->    assumability_function(
                assumability_function_function_type :: assumability_function_function_type,
                assumability_function_cost :: maybe(float),
                assumability_function_function_name :: maybe(string)
            ).

:- instance protobuf_runtime.pb_message(assumability_function).

:- func assumability_function_cost_or_default(assumability_function) = float.

:- func assumability_function_function_name_or_default(assumability_function) = string.

:- type antecedent
    --->    antecedent(
                antecedent_type :: antecedent_type,
                antecedent_matom :: modalised_atom,
                antecedent_function :: maybe(assumability_function)
            ).

:- instance protobuf_runtime.pb_message(antecedent).

:- type modalised_rule
    --->    modalised_rule(
                modalised_rule_head :: modalised_atom,
                modalised_rule_ante :: list(antecedent)
            ).

:- instance protobuf_runtime.pb_message(modalised_rule).

:- type marked_query
    --->    marked_query(
                marked_query_matom :: modalised_atom,
                marked_query_marking :: marked_query_marking,
                marked_query_function :: maybe(assumability_function)
            ).

:- instance protobuf_runtime.pb_message(marked_query).

:- type proof
    --->    proof(
                proof_proof :: list(marked_query),
                proof_cost :: float
            ).

:- instance protobuf_runtime.pb_message(proof).

:- type request
    --->    request(
                request_rt :: request_code
            ).

:- instance protobuf_runtime.pb_message(request).

:- type request_reply
    --->    request_reply(
                request_reply_rc :: request_reply_return_code,
                request_reply_error_message :: maybe(string)
            ).

:- instance protobuf_runtime.pb_message(request_reply).

:- func request_reply_error_message_or_default(request_reply) = string.

:- type load_file
    --->    load_file(
                load_file_file_name :: string
            ).

:- instance protobuf_runtime.pb_message(load_file).

:- type load_file_reply
    --->    load_file_reply(
                load_file_reply_rc :: load_file_reply_return_code,
                load_file_reply_error :: maybe(string),
                load_file_reply_line :: maybe(int)
            ).

:- instance protobuf_runtime.pb_message(load_file_reply).

:- func load_file_reply_error_or_default(load_file_reply) = string.

:- func load_file_reply_line_or_default(load_file_reply) = int.

:- type clear_facts_by_modality
    --->    clear_facts_by_modality(
                clear_facts_by_modality_mod :: modality
            ).

:- instance protobuf_runtime.pb_message(clear_facts_by_modality).

:- type clear_assumability_function
    --->    clear_assumability_function(
                clear_assumability_function_function_name :: string
            ).

:- instance protobuf_runtime.pb_message(clear_assumability_function).

:- type add_rule
    --->    add_rule(
                add_rule_rule :: modalised_rule
            ).

:- instance protobuf_runtime.pb_message(add_rule).

:- type add_fact
    --->    add_fact(
                add_fact_fact :: modalised_atom
            ).

:- instance protobuf_runtime.pb_message(add_fact).

:- type add_assumable
    --->    add_assumable(
                add_assumable_function_name :: string,
                add_assumable_fact :: modalised_atom,
                add_assumable_cost :: float
            ).

:- instance protobuf_runtime.pb_message(add_assumable).

:- type add_disjoint_decl
    --->    add_disjoint_decl(
                add_disjoint_decl_dd :: list(modalised_atom)
            ).

:- instance protobuf_runtime.pb_message(add_disjoint_decl).

:- type proof_search_method
    --->    proof_search_method(
                proof_search_method_method :: proof_search_method_type,
                proof_search_method_max_bound :: maybe(float),
                proof_search_method_init_bound :: maybe(float),
                proof_search_method_multiplier :: maybe(float)
            ).

:- instance protobuf_runtime.pb_message(proof_search_method).

:- func proof_search_method_max_bound_or_default(proof_search_method) = float.

:- func proof_search_method_init_bound_or_default(proof_search_method) = float.

:- func proof_search_method_multiplier_or_default(proof_search_method) = float.

:- type prove
    --->    prove(
                prove_queries :: list(marked_query),
                prove_method :: proof_search_method
            ).

:- instance protobuf_runtime.pb_message(prove).

:- type prove_reply
    --->    prove_reply(
                prove_reply_rc :: prove_reply_return_code,
                prove_reply_proofs :: list(proof)
            ).

:- instance protobuf_runtime.pb_message(prove_reply).

:- type modality
    --->    modality_any
    ;       modality_truth
    ;       modality_event
    ;       modality_belief
    ;       modality_intention
    ;       modality_attention
    ;       modality_understanding
    ;       modality_generation.

:- instance protobuf_runtime.pb_enumeration(modality).

:- type term_term_type
    --->    term_term_type_variable
    ;       term_term_type_function.

:- instance protobuf_runtime.pb_enumeration(term_term_type).

:- type assumability_function_function_type
    --->    assumability_function_function_type_notassumable
    ;       assumability_function_function_type_const
    ;       assumability_function_function_type_named.

:- instance protobuf_runtime.pb_enumeration(assumability_function_function_type).

:- type antecedent_type
    --->    antecedent_type_assumable
    ;       antecedent_type_asserted.

:- instance protobuf_runtime.pb_enumeration(antecedent_type).

:- type marked_query_marking
    --->    marked_query_marking_proved
    ;       marked_query_marking_unsolved
    ;       marked_query_marking_assumed
    ;       marked_query_marking_asserted.

:- instance protobuf_runtime.pb_enumeration(marked_query_marking).

:- type request_code
    --->    request_code_clearcontext
    ;       request_code_loadfile
    ;       request_code_clearrules
    ;       request_code_clearfacts
    ;       request_code_clearfactsbymodality
    ;       request_code_clearassumables
    ;       request_code_clearassumabilityfunction
    ;       request_code_cleardisjointdecls
    ;       request_code_addrule
    ;       request_code_addfact
    ;       request_code_addassumable
    ;       request_code_adddisjointdecl
    ;       request_code_prove.

:- instance protobuf_runtime.pb_enumeration(request_code).

:- type request_reply_return_code
    --->    request_reply_return_code_ok
    ;       request_reply_return_code_protocolerror.

:- instance protobuf_runtime.pb_enumeration(request_reply_return_code).

:- type load_file_reply_return_code
    --->    load_file_reply_return_code_ok
    ;       load_file_reply_return_code_protocolerror
    ;       load_file_reply_return_code_ioerror
    ;       load_file_reply_return_code_syntaxerror.

:- instance protobuf_runtime.pb_enumeration(load_file_reply_return_code).

:- type proof_search_method_type
    --->    proof_search_method_type_dfs
    ;       proof_search_method_type_boundeddfs
    ;       proof_search_method_type_iddfs.

:- instance protobuf_runtime.pb_enumeration(proof_search_method_type).

:- type prove_reply_return_code
    --->    prove_reply_return_code_ok
    ;       prove_reply_return_code_abducererror.

:- instance protobuf_runtime.pb_enumeration(prove_reply_return_code).

:- implementation.

:- instance protobuf_runtime.pb_message(term) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(term_term_type_variable), required),
    field_info(_, 2, 1, pb_string, optional),
    field_info(_, 3, 2, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:term), repeated),
    field_info(_, 4, 3, pb_string, optional),

    init_message = term(term_term_type_variable, no, [], no)
].

term_functor_or_default(Message) = Value :-
    ( Message ^ term_functor = yes(Value)
    ; Message ^ term_functor = no,
        Value = ""
    ).

term_var_name_or_default(Message) = Value :-
    ( Message ^ term_var_name = yes(Value)
    ; Message ^ term_var_name = no,
        Value = ""
    ).

:- instance protobuf_runtime.pb_message(atom) where [
    field_info(_, 1, 0, pb_string, required),
    field_info(_, 2, 1, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:term), repeated),

    init_message = atom("", [])
].

:- instance protobuf_runtime.pb_message(modalised_atom) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(modality_any), repeated),
    field_info(_, 2, 1, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:atom), required),

    init_message = modalised_atom([], protobuf_runtime.init_message:atom)
].

:- instance protobuf_runtime.pb_message(assumability_function) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(assumability_function_function_type_notassumable), required),
    field_info(_, 2, 1, pb_double, optional),
    field_info(_, 3, 2, pb_string, optional),

    init_message = assumability_function(assumability_function_function_type_notassumable, no, no)
].

assumability_function_cost_or_default(Message) = Value :-
    ( Message ^ assumability_function_cost = yes(Value)
    ; Message ^ assumability_function_cost = no,
        Value = 0.0
    ).

assumability_function_function_name_or_default(Message) = Value :-
    ( Message ^ assumability_function_function_name = yes(Value)
    ; Message ^ assumability_function_function_name = no,
        Value = ""
    ).

:- instance protobuf_runtime.pb_message(antecedent) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(antecedent_type_assumable), required),
    field_info(_, 2, 1, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:modalised_atom), required),
    field_info(_, 3, 2, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:assumability_function), optional),

    init_message = antecedent(antecedent_type_assumable, protobuf_runtime.init_message:modalised_atom, no)
].

:- instance protobuf_runtime.pb_message(modalised_rule) where [
    field_info(_, 1, 0, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:modalised_atom), required),
    field_info(_, 2, 1, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:antecedent), repeated),

    init_message = modalised_rule(protobuf_runtime.init_message:modalised_atom, [])
].

:- instance protobuf_runtime.pb_message(marked_query) where [
    field_info(_, 1, 0, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:modalised_atom), required),
    field_info(_, 2, 1, protobuf_runtime.'new enumeration'(marked_query_marking_proved), required),
    field_info(_, 3, 2, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:assumability_function), optional),

    init_message = marked_query(protobuf_runtime.init_message:modalised_atom, marked_query_marking_proved, no)
].

:- instance protobuf_runtime.pb_message(proof) where [
    field_info(_, 1, 0, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:marked_query), repeated),
    field_info(_, 2, 1, pb_double, required),

    init_message = proof([], 0.0)
].

:- instance protobuf_runtime.pb_message(request) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(request_code_clearcontext), required),

    init_message = request(request_code_clearcontext)
].

:- instance protobuf_runtime.pb_message(request_reply) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(request_reply_return_code_ok), required),
    field_info(_, 2, 1, pb_string, optional),

    init_message = request_reply(request_reply_return_code_ok, no)
].

request_reply_error_message_or_default(Message) = Value :-
    ( Message ^ request_reply_error_message = yes(Value)
    ; Message ^ request_reply_error_message = no,
        Value = ""
    ).

:- instance protobuf_runtime.pb_message(load_file) where [
    field_info(_, 1, 0, pb_string, required),

    init_message = load_file("")
].

:- instance protobuf_runtime.pb_message(load_file_reply) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(load_file_reply_return_code_ok), required),
    field_info(_, 2, 1, pb_string, optional),
    field_info(_, 3, 2, pb_int32, optional),

    init_message = load_file_reply(load_file_reply_return_code_ok, no, no)
].

load_file_reply_error_or_default(Message) = Value :-
    ( Message ^ load_file_reply_error = yes(Value)
    ; Message ^ load_file_reply_error = no,
        Value = ""
    ).

load_file_reply_line_or_default(Message) = Value :-
    ( Message ^ load_file_reply_line = yes(Value)
    ; Message ^ load_file_reply_line = no,
        Value = 0
    ).

:- instance protobuf_runtime.pb_message(clear_facts_by_modality) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(modality_any), required),

    init_message = clear_facts_by_modality(modality_any)
].

:- instance protobuf_runtime.pb_message(clear_assumability_function) where [
    field_info(_, 1, 0, pb_string, required),

    init_message = clear_assumability_function("")
].

:- instance protobuf_runtime.pb_message(add_rule) where [
    field_info(_, 1, 0, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:modalised_rule), required),

    init_message = add_rule(protobuf_runtime.init_message:modalised_rule)
].

:- instance protobuf_runtime.pb_message(add_fact) where [
    field_info(_, 1, 0, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:modalised_atom), required),

    init_message = add_fact(protobuf_runtime.init_message:modalised_atom)
].

:- instance protobuf_runtime.pb_message(add_assumable) where [
    field_info(_, 1, 0, pb_string, required),
    field_info(_, 2, 1, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:modalised_atom), required),
    field_info(_, 3, 2, pb_double, required),

    init_message = add_assumable("", protobuf_runtime.init_message:modalised_atom, 0.0)
].

:- instance protobuf_runtime.pb_message(add_disjoint_decl) where [
    field_info(_, 1, 0, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:modalised_atom), repeated),

    init_message = add_disjoint_decl([])
].

:- instance protobuf_runtime.pb_message(proof_search_method) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(proof_search_method_type_dfs), required),
    field_info(_, 2, 1, pb_double, optional),
    field_info(_, 3, 2, pb_double, optional),
    field_info(_, 4, 3, pb_double, optional),

    init_message = proof_search_method(proof_search_method_type_dfs, no, no, no)
].

proof_search_method_max_bound_or_default(Message) = Value :-
    ( Message ^ proof_search_method_max_bound = yes(Value)
    ; Message ^ proof_search_method_max_bound = no,
        Value = 0.0
    ).

proof_search_method_init_bound_or_default(Message) = Value :-
    ( Message ^ proof_search_method_init_bound = yes(Value)
    ; Message ^ proof_search_method_init_bound = no,
        Value = 0.0
    ).

proof_search_method_multiplier_or_default(Message) = Value :-
    ( Message ^ proof_search_method_multiplier = yes(Value)
    ; Message ^ proof_search_method_multiplier = no,
        Value = 0.0
    ).

:- instance protobuf_runtime.pb_message(prove) where [
    field_info(_, 1, 0, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:marked_query), repeated),
    field_info(_, 2, 1, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:proof_search_method), required),

    init_message = prove([], protobuf_runtime.init_message:proof_search_method)
].

:- instance protobuf_runtime.pb_message(prove_reply) where [
    field_info(_, 1, 0, protobuf_runtime.'new enumeration'(prove_reply_return_code_ok), required),
    field_info(_, 2, 1, protobuf_runtime.'new embedded_message'(protobuf_runtime.init_message:proof), repeated),

    init_message = prove_reply(prove_reply_return_code_ok, [])
].

:- instance protobuf_runtime.pb_enumeration(modality) where [
    enum_int(modality_any, 1),
    enum_int(modality_truth, 2),
    enum_int(modality_event, 3),
    enum_int(modality_belief, 4),
    enum_int(modality_intention, 5),
    enum_int(modality_attention, 6),
    enum_int(modality_understanding, 7),
    enum_int(modality_generation, 8)
].

:- instance protobuf_runtime.pb_enumeration(term_term_type) where [
    enum_int(term_term_type_variable, 1),
    enum_int(term_term_type_function, 2)
].

:- instance protobuf_runtime.pb_enumeration(assumability_function_function_type) where [
    enum_int(assumability_function_function_type_notassumable, 1),
    enum_int(assumability_function_function_type_const, 2),
    enum_int(assumability_function_function_type_named, 3)
].

:- instance protobuf_runtime.pb_enumeration(antecedent_type) where [
    enum_int(antecedent_type_assumable, 1),
    enum_int(antecedent_type_asserted, 2)
].

:- instance protobuf_runtime.pb_enumeration(marked_query_marking) where [
    enum_int(marked_query_marking_proved, 1),
    enum_int(marked_query_marking_unsolved, 2),
    enum_int(marked_query_marking_assumed, 3),
    enum_int(marked_query_marking_asserted, 4)
].

:- instance protobuf_runtime.pb_enumeration(request_code) where [
    enum_int(request_code_clearcontext, 1),
    enum_int(request_code_loadfile, 2),
    enum_int(request_code_clearrules, 3),
    enum_int(request_code_clearfacts, 4),
    enum_int(request_code_clearfactsbymodality, 5),
    enum_int(request_code_clearassumables, 6),
    enum_int(request_code_clearassumabilityfunction, 7),
    enum_int(request_code_cleardisjointdecls, 8),
    enum_int(request_code_addrule, 9),
    enum_int(request_code_addfact, 10),
    enum_int(request_code_addassumable, 11),
    enum_int(request_code_adddisjointdecl, 12),
    enum_int(request_code_prove, 13)
].

:- instance protobuf_runtime.pb_enumeration(request_reply_return_code) where [
    enum_int(request_reply_return_code_ok, 1),
    enum_int(request_reply_return_code_protocolerror, 2)
].

:- instance protobuf_runtime.pb_enumeration(load_file_reply_return_code) where [
    enum_int(load_file_reply_return_code_ok, 1),
    enum_int(load_file_reply_return_code_protocolerror, 2),
    enum_int(load_file_reply_return_code_ioerror, 3),
    enum_int(load_file_reply_return_code_syntaxerror, 4)
].

:- instance protobuf_runtime.pb_enumeration(proof_search_method_type) where [
    enum_int(proof_search_method_type_dfs, 1),
    enum_int(proof_search_method_type_boundeddfs, 2),
    enum_int(proof_search_method_type_iddfs, 3)
].

:- instance protobuf_runtime.pb_enumeration(prove_reply_return_code) where [
    enum_int(prove_reply_return_code_ok, 1),
    enum_int(prove_reply_return_code_abducererror, 2)
].

:- end_module protocol.
